#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>  
#include <windows.h> 
#include <conio.h> 


#ifdef _WIN32
    #define CLEAR "cls"  // Comando completo para limpar tela no Windows, else está para linux e macOs, junto ao 
    #define SLEEP(ms) Sleep(ms)
#else
    #define CLEAR "clear"
    #define SLEEP(ms) usleep(ms * 1000)
#endif

#define LINHAS 7
#define COLUNAS 4
#define LETRAS "ABCDEFG"
#define MAX_DESTINO 4
#define MAX_DESTINOS 4
#define MAX_CLIENTE 3
#define MAX_PASSAGENS 3

typedef struct {
	char nome[50], trajet[20], tipo[100];
 	int num, cabin;
 	float preco;

} Barco;


// criando uma struct para um usuário (gerente ou funcionário)
typedef struct {
    char nome[50];
    char usuario[20];
    char senha[20];
    char cargo[20];  // Ex.: "Gerente - geral, interino, " ou "Funcionário"
    int cod;
	int cpf;
} Funcionario;

int prox_id= 1;

struct endereco{

	char cep[9];
	char rua[50];
	char numero[10];
	char bairro[50];
	char cidade[50];
	char estado[50];	
}; 

struct cliente{
	
	int id;
	char nome[50];
	char cpf[11];
	char data_nasc[20];
	struct endereco end;
	char email[50];
	char telefone[20];
	struct cliente *proximo_cl;// aponta para um novo cliente, permitindo uma lista encadeada
};  

struct embarcacao{
	char nome[50];
	char tipo[50];
	int capacidade;
	struct embarcacao *proximo_em;//aponta para uma nova embarcaco
};

typedef struct{
    int notafiscaltemp;
    char nome[50];
    char cpf[20];
    struct {
        char preco[50];
        char horario[10];
        char rota[50];
        char nota[50];
    }notaFiscal;
}cliente;

typedef struct {
    char rota[50];
    char horario[10];
    char preco[50];
}barco;

typedef struct {
    char rota[30];
    char horario[10];
    char preco[10];
    int linhas;
    int colunas;
} Rota;


cliente Cliente[MAX_CLIENTE] = { 
    {14, "Carlos", "016.185.562.82", {"R$200", "8:00", "Manaus -> Tabatinga", "123456789"}}, //Declarações dos clientes
    {23, "Cristiane", "823.193.345.21",{"R$150", "10:30", "Manaus -> Belém", "01020304"}},
    {9,  "Leandra", "921.123.343.24", {"R$250", "10:00", "Manaus-> Santarém", "0203040506"}},
};

barco Barcos[MAX_DESTINO] = {
    {"Manaus -> Tabatinga", "08:00", "R$200"},  // Declaração dos barcos
    {"Manaus -> Belém", "10:30", "R$150"}, 
    {"Manaus -> Santarém", "10:00", "R$250"},
    {"Manaus -> Parintins", "11:00", "R$130"}};
    
    Rota rotas[MAX_DESTINO] = {
    {"Manaus -> Tabatinga", "08:00", "R$200", 5, 4},
    {"Manaus -> Belém", "10:30", "R$150", 7, 4},
    {"Manaus -> Santarém", "10:00", "R$250", 6, 4},
    {"Manaus -> Parintins", "11:00", "R$130", 8, 4}
};

// Funções para carregar e salvar usuários em arquivos
void salvarFuncionario(const char *arquivo, Funcionario *usuario) {
    FILE *fp = fopen(arquivo, "wb");
    if (fp) {
        fwrite(usuario, sizeof(Funcionario), 1, fp);
        fclose(fp);
    }
}

int carregarFuncionario(const char *arquivo, Funcionario *usuario) {
    FILE *fp = fopen(arquivo, "rb");
    if (fp) {
        fread(usuario, sizeof(Funcionario), 1, fp);
        fclose(fp);
        return 1;  // Sucesso
    }
    return 0;  // Falha
}

// Animação de barco navegando no terminal
void animarBarco() {
    const char *frames[] = {
    	"\n\n"
        "       ~~~~~~            \n"
        "     ~~~~~~~~~~          \n"
        "    ~~~~~~~~~~~~         \n"
        "   __|____|_____\\____    \n"
        "  |                |      \n"
        "  |  BANZEIRO  |~~~   \n"
        "~~~~~~~~~~~~~~~~~~~~~~~~~ \n",
        "\n\n"
        "     ~~~~~~~~~~           \n"
        "   ~~~~~~~~~~~~~~~        \n"
        "  ~~~~~~~~~~~~~~~~~~~     \n"
        " __|____|______/_____\\_   \n"
        "|                |        \n"
        "|  BANZEIRO  | ~~~~   \n"
        "~~~~~~~~~~~~~~~~~~~~~~~~~ \n",
        "\n\n"
        "   ~~~~~~~~~~~~~~~~       \n"
        " ~~~~~~~~~~~~~~~~~~~~     \n"
        "~~~~~~~~~~~~~~~~~~~~~~~   \n"
        "____|___|_______/_____\\_  \n"
        "|                |        \n"
        "|  BANZEIRO  | ~~~~~  \n"
        "~~~~~~~~~~~~~~~~~~~~~~~~~ \n"
    };
    

    // Loop para exibir os frames em sequência, criando a animação
    int i;
	for ( i = 0; i < 10; i++) {
        system(CLEAR);
        printf("%s", frames[i % 3]);
        fflush(stdout);  // Garante que o frame seja exibido
        SLEEP(300);  // Espera 300ms entre os frames
    }
}

void animacaoBarco() {
	const char *frames[] = {
    "\n\n"
	"   ~     ~ \n"
    "      ~    ~   \n"
    "    ~    ~    ~   ~   ~ \n"
    "        ~      \n",
    "   ~  \n"
    "      ~    ~ \n"
    "    ~    ~\n"
    "       \n",
    "   ~     ~    ~\n"
    "      ~    ~      ~    ~\n"
    "    ~    ~    ~   ~   ~   ~\n"
    "        ~      ~     ~\n",
	
	};

	 int i;
	for ( i = 0; i < 10; i++) {
        system(CLEAR);
        printf("%s", frames[i % 3]);
        fflush(stdout);  // Garante que o frame seja exibido
        SLEEP(300);  // Espera 300ms entre os frames
	}
		printf("\nBarco pronto para embarque!\n");
		SLEEP(1500);
}

// Menus para Gerente e Funcionário
void menuGerente();
void menuFuncionario();

// Função para cadastrar novos funcionários
void cadastrarFuncionario() {
	setlocale(LC_ALL, "Portuguese");
    Funcionario novo_funcionario;
    printf("\n ========== Cadastro de Funcionário ==========\n\n");
    printf("Nome: ");
    getchar(); // Limpa o buffer
    fgets(novo_funcionario.nome, sizeof(novo_funcionario.nome), stdin);
    novo_funcionario.nome[strcspn(novo_funcionario.nome, "\n")] = 0; // Remove nova linha
    printf("Usuário: ");
    fgets(novo_funcionario.usuario, sizeof(novo_funcionario.usuario), stdin);
    novo_funcionario.usuario[strcspn(novo_funcionario.usuario, "\n")] = 0; // Remove nova linha
    printf("Senha: ");
    fgets(novo_funcionario.senha, sizeof(novo_funcionario.senha), stdin);
    novo_funcionario.senha[strcspn(novo_funcionario.senha, "\n")] = 0; // Remove nova linha
    strcpy(novo_funcionario.cargo, "Funcionário"); // Define o cargo
    novo_funcionario.cod = 0; // O código será atribuído pelo gerente
    novo_funcionario.cpf = 0; // O CPF será atribuído pelo gerente

    salvarFuncionario("novos_funcionarios.dat", &novo_funcionario);
    printf("\n\nFuncionário cadastrado com sucesso! Aguardando autorização do gerente.\n");
    Sleep(5000);
	system("cls");
}

// Função para listar novos funcionários
void listarNovosFuncionarios() {
	setlocale(LC_ALL, "Portuguese");
	system("cls");
    Funcionario usuario;
    FILE *fp = fopen("novos_funcionarios.dat", "rb");
    if (!fp) {
        printf("Nenhum funcionário cadastrado.\n");
        Sleep(2000);
        system("cls");
        return;
    }
    printf("\n ============ Novos Funcionários ============\n\n");
    while (fread(&usuario, sizeof(Funcionario), 1, fp)) {
        printf("Nome: %s, Usuário: %s\n", usuario.nome, usuario.usuario);
    }
    Sleep(2500);
	system("cls");
    fclose(fp);
}

// Função para autorizar novos funcionários
void autorizarFuncionarios() {
	setlocale(LC_ALL, "Portuguese");
	system("cls");
    Funcionario usuario;
    FILE *fp = fopen("novos_funcionarios.dat", "rb");
    if (!fp) {
        printf("Nenhum funcionário cadastrado.\n");
        return;
    }

    FILE *fp_temp = fopen("temp.dat", "wb");
    while (fread(&usuario, sizeof(Funcionario), 1, fp)) {
    	system("cls");
        printf("Nome: %s, Usuário: %s ", usuario.nome, usuario.usuario);
        printf("- Autorizar? (S/N): ");
        char resposta = getch();
        if (resposta == 'S' || resposta == 's') {
            printf("\nDigite o CPF: ");
            scanf("%d", &usuario.cpf);
            usuario.cod = 1; // Atribuir um código único
            salvarFuncionario("funcionarios.dat", &usuario); // Salva como funcionário autorizado
        } else {
            fwrite(&usuario, sizeof(Funcionario), 1, fp_temp); // Mantém no arquivo temporário se não autorizado
        }
    }
    fclose(fp);
    fclose(fp_temp);
    remove("novos_funcionarios.dat");
    rename("temp.dat", "novos_funcionarios.dat"); // Atualiza o arquivo original
    printf("Todos os processo de autorização concluídos.\n");
    Sleep(2500);
	system("cls");
}

// Função de login e autenticação
void login() {
	setlocale(LC_ALL, "Portuguese");
    Funcionario usuario;
    char login[20], senha[20];
    int i = 0;

    printf("\n ============= Login do Usuário =============\n\n");
    printf("   Usuário: ");
    scanf("%s", login);
    printf("   Senha: ");

    // Mascarando a entrada da senha
    while (1) {
        char ch = getch();  // Captura o caractere sem exibi-lo
        if (ch == 13) {     // Enter
            senha[i] = '\0'; // Finaliza a string da senha
            break;
        } else if (ch == 8) { // Backspace
            if (i > 0) {
                i--;
                printf("\b \b"); // Apaga o último caractere na tela
            }
        } else {
            senha[i++] = ch;  // Armazena o caractere na senha
            printf("*");       // Exibe um asterisco
        }
    }
    printf("\n");

    if (carregarFuncionario(login, &usuario)) {
    	setlocale(LC_ALL, "Portuguese");
        if (strcmp(usuario.senha, senha) == 0) {
            printf("\n\n\tBem-vindo, %s! (%s)\n", usuario.nome, usuario.cargo);
            Sleep(4200);
            
            animarBarco();  // Exibe a animação do barco

            if (strcmp(usuario.cargo, "Gerente") == 0) {
                system("cls");
				menuGerente();
            } else {
            	system("cls");
                menuFuncionario();
            }
        } else {
            printf("Senha incorreta!\n");
            Sleep(2200);
            system("cls");
        }
    } else {
        printf("Usuário não encontrado!\n");
    }
}

// Função para recuperação de senha
void recuperarSenha() {
	setlocale(LC_ALL, "Portuguese");
    Funcionario usuario;
    char login[20];

    printf("\n =========== Recuperação de Senha ===========\n\n");
    printf("Informe o usuário: ");
    scanf("%s", login);

    if (carregarFuncionario(login, &usuario)) {
        printf("\n\tSenha do %s (%s): %s\n\n", usuario.cargo, usuario.nome, usuario.senha);
        system("pause");
        system("cls");
    } else {
        printf("\n\tUsuário não encontrado!\n\n");
        system("pause");
        system("cls");
    }
}

Funcionario* cadas_funcis(Funcionario *funcis, int *n){
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	(*n)++;
    funcis = (Funcionario*)realloc(funcis, (*n) * sizeof(Funcionario));
    if (funcis == NULL) {
        printf("Erro ao alocar memória\n");
        exit(1);
    }

    Funcionario novo_funcis;
    novo_funcis.cod = *n;
    
	printf("\n ========== Cadastrar Funcionario ==========\n\n");
	printf(" ________________________________________\n");
	printf("|                                        \n");
	printf("|  Digite nome do funcionario: ");
	getchar();
	fflush(stdin);
	fgets(novo_funcis.nome, 50, stdin);
	novo_funcis.nome[strcspn(novo_funcis.nome, "\n")] = 0;
	printf("|  Digite CPF do funcionario: ");
	scanf("%d", &novo_funcis.cpf);
	printf("|  Digite funcao do funcionario: ");
	getchar();
	fflush(stdin);
	fgets(novo_funcis.cargo, 20, stdin);
	novo_funcis.cargo[strcspn(novo_funcis.cargo, "\n")] = 0;
	printf("|                                        \n");
	printf("|________________________________________\n");
	funcis[(*n) - 1] = novo_funcis;
	printf("\n\t\tCadastrado\n");
	printf("\nPressione qualquer tecla para continuar");
	system("pause > nul");
	system("CLS");
 						
	return funcis;
}

void ver_funcis(Funcionario *funcis, int n) {
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	int i;
	
	printf("\n ============= Ver Funcionarios =============\n\n");
	
    if (n == 0) {
        printf("\n\tNenhum cliente cadastrado.\n");
        printf("\nPressione qualquer tecla para continuar");
		system("pause > nul");
		system("CLS");
        return;
    }
    
    for (i = 0; i < n; i++) {
		printf(" ________________________________________\n");
		printf("|                                        \n");
		printf("|  Nome do funcionario: %s\n", funcis[i].nome);
		printf("|  CPF do funcionario: %d\n", funcis[i].cpf);
		printf("|  Codigo do funcionario: %d\n", funcis[i].cod);
		printf("|  Funcao do funcionario: %s\n", funcis[i].cargo);
		printf("|  Login do funcionario: %s\n", funcis[i].usuario);
		printf("|  Senha do funcionario: %s\n", funcis[i].senha);
		printf("|________________________________________\n");	   
    }
    
    printf("\nPressione qualquer tecla para continuar");
	system("pause > nul");
	system("CLS");
}


void atual_funcis(Funcionario *funcis, int n) {
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	int cod, i, cpf;
	
	printf("\n ========== Atualizar Funcionario ==========\n\n");
	
    if (n == 0) {
        printf("\n\tNenhum cliente cadastrado.\n");
        printf("\nPressione qualquer tecla para continuar");
		system("pause > nul");
		system("CLS");
        return;
    }
    
    printf("\nDigite o codigo do funcionario que deseja atualizar: \n");
    scanf("%d", &cod);
    printf("\n\nDigite o CPF do funcionario que deseja atualizar: \n");
    scanf("%d", &cpf);

    for (i = 0; i < n; i++) {
        if (funcis[i].cod == cod || funcis[i].cpf == cpf) {
            printf("\nAtualizando dados do funcionario com codigo %d...\n", cod);
            printf(" ________________________________________\n");
			printf("|                                        \n");
			printf("|  Atualize o nome do funcionario: ");
			getchar();
			fflush(stdin);
			fgets(funcis[i].nome, 50, stdin);
			funcis[i].nome[strcspn(funcis[i].nome, "\n")] = 0;
			printf("|  Atualize o CPF do funcionario: ");
			scanf("%d", &funcis[i].cpf);
			printf("|  Atualize a funcao do funcionario: ");
			getchar();
			fflush(stdin);
			fgets(funcis[i].cargo, 20, stdin);
			funcis[i].cargo[strcspn(funcis[i].cargo, "\n")] = 0;
			printf("|                                        \n");
			printf("|      Dados atualizados com sucesso!\n");
			printf("|________________________________________\n");
			printf("\n\t\tAtualizado!\n");
			printf("\nPressione qualquer tecla para continuar");
 			system("pause > nul");
 			system("CLS");
	
            return;
        }
    }
    printf("Funcionario com codigo %d não encontrado.\n", cod);
    printf("\nPressione qualquer tecla para continuar");
 	system("pause > nul");
 	system("CLS");
}


Funcionario* demit_funcis(Funcionario *funcis, int *n) {
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	int cod, i, j, cpf;
	
	printf("\n =========== Demitir Funcionarios ===========\n\n");
	
    if (*n == 0) {
        printf("\n\tNenhum funcionario cadastrado.\n");
        printf("\nPressione qualquer tecla para continuar");
		system("pause > nul");
		system("CLS");
        return funcis;
    }

    printf(" ________________________________________\n");
	printf("|                                        \n");
 	printf("|  Digite o codigo do funcionario que deseja demitir: ");
 	scanf("%d", &cod);
	printf("|  Digite o CPF do funcionario que deseja demitir: ");
 	scanf("%d", &cpf);
	
	
	
    for (i = 0; i < *n; i++) {
        if (funcis[i].cod == cod || funcis[i].cpf == cpf) {
        	printf("|  Demitindo funcionario com codigo %d e CPF %d...\n", cod, cpf);
        	
			for (j = i; j < *n - 1; j++) {
                funcis[j] = funcis[j + 1];
            }
            (*n)--;
            
            funcis = (Funcionario*)realloc(funcis, (*n) * sizeof(Funcionario));
			printf("|                                        \n");
			printf("|  Dados retirados com sucesso!\n");
			printf("|________________________________________\n");
			
			printf("\n\t\tRetirado!\n");
			
            printf("\n\tFuncionario demitido com sucesso!\n\n");
            printf("\nPressione qualquer tecla para continuar");
			system("pause > nul");
			system("CLS");
            
            return funcis;
        }
    }
    printf("\n\tFuncionario com codigo %d não encontrado.\n", cod);
    
    printf("\nPressione qualquer tecla para continuar");
	system("pause > nul");
	system("CLS");
	
    return funcis;
}


Barco* inser_barcos(Barco *barcos, int *m){
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	(*m)++;
    barcos = (Barco*)realloc(barcos, (*m) * sizeof(Barco));
    if (barcos == NULL) {
        printf("Erro ao alocar memória\n");
        exit(1);
    }

    Barco novo_barcos;
    novo_barcos.num = *m;
	printf("\n ============== Inserir Barco ==============\n\n");
	printf(" ________________________________________\n");
	printf("|                                        \n");
	printf("|  Digite o nome do barco: ");
	getchar();
	fgets(novo_barcos.nome, 30, stdin);
	novo_barcos.nome[strcspn(novo_barcos.nome, "\n")] = 0;
	printf("|  Digite a quatidades de cabines: ");
	scanf("%d", &novo_barcos.cabin);
	printf("|  Digite o trajeto do barco: ");
	getchar();
	fgets(novo_barcos.trajet, 50, stdin);
	novo_barcos.trajet[strcspn(novo_barcos.trajet, "\n")] = 0;
	printf("|  Digite o valor das passagens do barco: ");
	scanf("%f", &novo_barcos.preco);
	printf("|  Digite o tipo do barco: ");
	getchar();
	fgets(novo_barcos.tipo, 100, stdin);
	novo_barcos.tipo[strcspn(novo_barcos.tipo, "\n")] = 0;
	printf("|                                        \n");
	printf("|________________________________________\n");
	barcos[(*m) - 1] = novo_barcos;
	printf("\n\t\tCadastrado\n");
	printf("\nPressione qualquer tecla para continuar");
	system("pause > nul");
	system("CLS");
 						
	return barcos;
}

void ver_barcos(Barco *barcos, int m) {
	setlocale(LC_ALL, "Portuguese");
	int i;
	system("cls");
	printf("\n ================ Ver Barcos ================\n\n");
	
    if (m == 0) {
        printf("\n\tNenhum barco cadastrado.\n");
        printf("\nPressione qualquer tecla para continuar");
		system("pause > nul");
		system("CLS");
        return;
    }
    
    for (i = 0; i < m; i++) {
		printf(" ________________________________________\n");
		printf("|                                        \n");
		printf("|  Nome do barco: %s\n", barcos[i].nome);
		printf("|  Trajeto do barco: %s\n", barcos[i].trajet);
		printf("|  Tipo do barco: %s\n", barcos[i].tipo);
		printf("|  Numero de cabines do barco: %d\n", barcos[i].cabin);
		printf("|  Numero do barco: %d\n", barcos[i].num);
		printf("|  Preco das passagens do barco: R$ %.2f\n", barcos[i].preco);
		printf("|________________________________________\n");	   
    }
    
    printf("\nPressione qualquer tecla para continuar");
	system("pause > nul");
	system("CLS");
}

void atual_barcos(Barco *barcos, int m) {
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	int num, i;
	
	printf("\n ============= Atualizar Barco =============\n\n");
	
    if (m == 0) {
        printf("\n\tNenhum barco cadastrado.\n");
        printf("\nPressione qualquer tecla para continuar");
		system("pause > nul");
		system("CLS");
        return;
    }
    
    printf("\nDigite o numero do barco que deseja atualizar: ");
    scanf("%d", &num);

    for (i = 0; i < m; i++) {
        if (barcos[i].num == num) {
            printf("\nAtualizando dados do funcionario com codigo %d...\n", num);
            printf(" ________________________________________\n");
			printf("|                                        \n");
			printf("|  Atualize o nome do barco: ");
			getchar();
			fgets(barcos[i].nome, 30, stdin);
			barcos[i].nome[strcspn(barcos[i].nome, "\n")] = 0;
			printf("|  Atualize a quatidades de cabines: ");
			scanf("%d", &barcos[i].cabin);
			printf("|  Atualize o trajeto do barco: ");
			getchar();
			fgets(barcos[i].trajet, 50, stdin);
			barcos[i].trajet[strcspn(barcos[i].trajet, "\n")] = 0;
			printf("|  Atualize o valor das passagens do barco: ");
			scanf("%f", &barcos[i].preco);
			printf("|  Atualize o tipo do barco: ");
			getchar();
			fgets(barcos[i].tipo, 100, stdin);
			barcos[i].tipo[strcspn(barcos[i].tipo, "\n")] = 0;
			printf("|                                        \n");
			printf("|    Dados atualizados com sucesso!\n");
			printf("|________________________________________\n");
			printf("\n\t\tAtualizado!\n");
			printf("\nPressione qualquer tecla para continuar");
 			system("pause > nul");
 			system("CLS");
	
            return;
        }
    }
    printf("\n\tBarco com nummero %d não encontrado.\n", num);
    printf("\nPressione qualquer tecla para continuar");
 	system("pause > nul");
 	system("CLS");
}

Barco* deletar_barcos(Barco *barcos, int *m) {
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	int num, i, j;
	
	printf("\n ============== Excluir Barco ==============\n\n");
	
    if (*m == 0) {
        printf("\n\tNenhum barco cadastrado.\n");
        printf("\nPressione qualquer tecla para continuar");
		system("pause > nul");
		system("CLS");
        return barcos;
    }

    printf(" ________________________________________\n");
	printf("|                                        \n");
 	printf("|  Digite o numero do barco que deseja retirar: ");
 	scanf("%d", &num);

    for (i = 0; i < *m; i++) {
        if (barcos[i].num == num) {
        	printf("|  Retirando barco com codigo %d...\n", num);
        	
			for (j = i; j < *m - 1; j++) {
                barcos[j] = barcos[j + 1];
            }
            (*m)--;
            
            barcos = (Barco*)realloc(barcos, (*m) * sizeof(Barco));
			printf("|                                        \n");
			printf("|  Dados retirados com sucesso!\n");
			printf("|________________________________________\n");
			
			printf("\n\t\tRetirado!\n");
			
            printf("\n\tFuncionario demitido com sucesso!\n\n");
            printf("\nPressione qualquer tecla para continuar");
			system("pause > nul");
			system("CLS");
            
            return barcos;
        }
    }
    printf("\n\tBarco com numero %d não encontrado.\n", num);
    
    printf("\nPressione qualquer tecla para continuar");
	system("pause > nul");
	system("CLS");
	
    return barcos;
}

void menu();
void telaCancelamento();
void linha();

void menu(){
	setlocale(LC_ALL, "Portuguese");
    int escolha,i=0;
    system("cls");
    
    while (i<1){
        printf("\n ===== Tela de cancelamento de passagem =====\n\n");
        printf("\t     1. Cancelar Passagem\n");
        printf("\t           2. Sair\n\n");
        printf("\t     Escolha uma opção: ");
        scanf ("%d",&escolha);
        getchar(); 
        switch (escolha){
            case 1:
                telaCancelamento();
                system("cls");
                break;
            case 2:
                printf ("Saindo...");
                Sleep(5000);
                i++;
                system("cls");
                break;
            default:
                printf ("Erro, comando inválido!!\n\nTente isso novamente");
                Sleep(5000);
                system("cls");
        }
    }
}
    
void telaCancelamento(){
	setlocale(LC_ALL, "Portuguese");
	system("cls");
    char notafiscal[50];
    int i=0,escolha,aux=0,j=0,k=0;
    SetConsoleTitle("Tela de Cancelamento");
    printf ("Digite sua nota fiscal: ");
    fgets(notafiscal,50,stdin);

    notafiscal[strcspn(notafiscal, "\n")] = '\0';
	for(i=0;i<MAX_DESTINO;i++){
        if(strcmp(notafiscal,Cliente[i].notaFiscal.nota)==0){
        	linha();
            printf ("\nNome: %s",Cliente[i].nome);
            printf ("\ncpf: %s",Cliente[i].cpf);
            printf ("\nSua nota fiscal: %s\nsua rota: %s que sai as %s\n",Cliente[i].notaFiscal.nota,Cliente[i].notaFiscal.rota,Cliente[i].notaFiscal.horario);
            printf ("\nFaltando apenas %dh",Cliente[i].notafiscaltemp);
            aux++;
    		if (Cliente[i].notafiscaltemp>=12){
    				linha();
        			printf ("\n\nVoce tem direito de reembolso total");
        			printf ("\nDeseja realmente fazer cancelamento de passagem?\nEscolha entre 1 ou 2\n\n1.Sim\n2.Nao\n");
				while(j<1){
					scanf ("%d",&escolha);
					switch (escolha){
        				case 1:
        					printf ("\nSua passagem foi cancelada, em ate 48h vai ser creditado na tua conta");
        					printf ("\nObrigado, volte sempre!!");
        					Sleep(5000);
        					j++;
        					break;
        				case 2: 
        					printf ("\nPassagem nao cancelada, retornando ao menu principal");
        					Sleep(3000);
        					j++;
							break;
        				default:
        					printf("\nErro,comando invalido\nTente novamente");
        					Sleep(3000);
        			}
				}
			}
			else{
				linha();
				printf ("Voce tem direito somente parcial do valor que sera restituido");
				printf ("\nDeseja realmente fazer cancelamento de passagem?\nEscolha entre 1 ou 2\n\n1.Sim\n2.Nao\n");
				printf ("");
        		scanf ("%d",&escolha);
				while(j<1){			
					switch (escolha){
        				case 1:
        					printf ("\nSua passagem foi cancelada, em ate 48h vai ser creditado na tua conta");
        					printf ("\nObrigado, volte sempre!!");
        					Sleep(5000);
        					j++;
        					break;
        				case 2: 
        					printf ("\nPassagem nao cancelada, retornando ao menu principal");
        					Sleep(5000);
        					j++;
        					break;
        				default:
        					printf("\nErro,comando invalido\nTente novamente");
        					Sleep(3000);
					}
				}
    		}
    	}
	}
	if(aux==0){
		system("cls");
    	printf ("Nota Fiscal invalida, tente novamente\n");
    	Sleep(1000);
	}
}

void linha(){
	printf ("\n*******************************************************\n");
}

void cadastrar_cl(struct cliente **head){// o 'head' é um ponteiro para o primeiro cliente da lista, mas como passamos ele como '**head', 
//ele sera atualizado pela funcao e o ponteiro apontara para o novo cliente
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	struct cliente *novo_cl = (struct cliente*) malloc(sizeof(struct cliente));// '*novo_cl' recebe novo espaco na memoria 
	novo_cl->id = prox_id++;

	printf("Nome: ");
	fflush(stdin);
	fgets(novo_cl->nome,50,stdin);
	
	printf("CPF: ");
	fflush(stdin);
	fgets(novo_cl->cpf,11,stdin);
	
	printf("Data de Nascimento: ");
	fflush(stdin);
	fgets(novo_cl->data_nasc,20,stdin);
	
	printf("CEP: ");
	fflush(stdin);
	fgets(novo_cl->end.cep,9,stdin);
	
	printf("Rua: ");
	fflush(stdin);
	fgets(novo_cl->end.rua,50,stdin);
	
	printf("Numero: ");
	fflush(stdin);
	fgets(novo_cl->end.numero,10,stdin);
	
	printf("Bairro: ");
	fflush(stdin);
	fgets(novo_cl->end.bairro,50,stdin);
	
	printf("Cidade: ");
	fflush(stdin);
	fgets(novo_cl->end.cidade,50,stdin);
	
	printf("Estado: ");
	fflush(stdin);
	fgets(novo_cl->end.estado,50,stdin);
	
	printf("E-mail: ");
	fflush(stdin);
	fgets(novo_cl->email,50,stdin);
	
	printf("Telefone: ");
	fflush(stdin);
	fgets(novo_cl->telefone,20,stdin);
	
	novo_cl->proximo_cl = *head;//vai apontar para o atual primeiro cliente da lista
    *head = novo_cl;
    
	printf("\nCliente cadastrado com sucesso!\n\n");
	system("cls");
}

void listar_clientes(struct cliente *head){
	system("cls");
	setlocale(LC_ALL, "Portuguese");
	
	if(head==NULL){
		printf("Nenhum cliente cadastrado!");
		return;
	}
	struct cliente *atual=head;
	while(atual!=NULL){
		
		printf("--------------------------------------------------");
		printf("\nID: %d\n", atual->id);
		printf("Nome: %s", atual->nome);
        printf("CPF: %s", atual->cpf);
        printf("CEP: %s", atual->end.cep);
        printf("Rua: %s", atual->end.rua);
        printf("Numero: %s", atual->end.numero);
        printf("Bairro: %s", atual->end.bairro);
        printf("Cidade: %s", atual->end.cidade);
        printf("Estado: %s", atual->end.estado);
        printf("Data de Nascimento: %s", atual->data_nasc);
        printf("\nTelefone: %s\n", atual->telefone);
        atual = atual->proximo_cl;	
	system("pause");
	}
	system("cls");
}

// Menu do Gerente
void menuGerente() {
	setlocale(LC_ALL, "Portuguese");
	SetConsoleTitle("BANZEIRO - GERENTE");
	Barco *barcos = NULL;
	Funcionario *funcis = NULL;
	struct cliente *head_cliente= NULL;
	int n = 0, m = 0, opcao=0;
    do {
  		printf("\n =============== Menu Gerente ===============\n\n");
        printf("\t 1. Cadastrar Funcionário\n");
        printf("\t  2. Listar Funcionários\n");
        printf("\t 3. Atualizar Funcionário\n");
        printf("\t  4. Excluir Funcionário\n\n");
        
        printf("\t 5. Cadastrar Embarcação\n");
        printf("\t  6. Listar Embarcações\n");
        printf("\t 7. Atualizar Embarcação\n");
        printf("\t  8. Excluir Embarcação\n\n");
        
        printf("     9. Autorizar Novos Funcionários\n");
        printf("      10. Listar Novos Funcionários\n\n");
        printf("\t   11. Cadastrar Cliente\n");    
        printf("\t    12. Listar Cliente\n\n");
        printf("\t   13. Cancelar Passagem\n\n");
        printf("\t        14. Feedback\n\n");
        printf("\t\t  0. Sair\n\n");
        printf("\t   Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
            	system("cls");
                printf("\n\nCadastrando Funcionário...\n\n");
                system("pause");
                funcis = cadas_funcis(funcis, &n);
                break;
            case 2:
            	system("cls");
                printf("Listando Funcionários...\n\n");
                system("pause");
                ver_funcis(funcis, n);
                break;
            case 3:
            	system("cls");
                printf("Atualizando Funcionário...\n\n");
                system("pause");
                atual_funcis(funcis, n);
                break;   
            case 4:
            	system("cls");
                printf("Excluindo Funcionário...\n\n");
                system("pause");
                funcis = demit_funcis(funcis, &n);
                break;    
            case 5:
            	system("cls");
                printf("Cadastrando Embarcação...\n\n");
                system("pause");
                barcos = inser_barcos(barcos, &m);
                break;
            case 6:
            	system("cls");
                printf("Listando Embarcações...\n\n");
                system("pause");
                ver_barcos(barcos, m);
                break;
            case 7:
            	system("cls");
                printf("Atualizando Embarcação...\n\n");
                system("pause");
                atual_barcos(barcos, m);
                break;
            case 8:
            	system("cls");
                printf("Excluindo Embarcação...\n\n");
                system("pause");
                barcos = deletar_barcos(barcos, &m);
                break;
            case 9:
            	system("cls");
                printf("Autorizar Novos Funcionários...\n\n");
                system("pause");
                autorizarFuncionarios();
                break;
            case 10:
            	system("cls");
                printf("Listando Novos Funcionários...\n\n");
                system("pause");
                listarNovosFuncionarios();
                break;
            case 11:
            	system("cls");
            	printf("Cadastrando Cliente...\n\n");
            	system("pause");
                cadastrar_cl(&head_cliente);
                break;
            case 12:
            	system("cls");
            	printf("\nListando Clientes...\n\n");
            	system("pause");
            	listar_clientes(head_cliente);
            	break;
            case 13:
            	system("cls");
            	printf("\n Iniciando o Cancelamento da viagem e reembolso...\n\n");
            	system("pause");
				menu();
				break;
			case 14:
				system("cls");
            	printf("\n Iniciando Feedback...\n\n");
            	system("pause");
            	system("cls");
				break;
			case 0:
                printf("Saindo...\n\n");
                system("cls");
                break;
            default:
                printf("Opção inválida!\n\n");
        }
    } while (opcao != 0);
}

void inicializarAssentos(char ***assentos, int linhas, int colunas) {
    int i, j;
	for (i = 0; i < linhas; i++) {
        for (j = 0; j < colunas; j++) {
            sprintf(assentos[i][j], "%c-%d", LETRAS[i], j + 1);
        }
    }
}

char ***criarAssentos(int linhas, int colunas) {
	int i, j;
    char ***assentos = (char ***)malloc(linhas * sizeof(char **));
    for (i = 0; i < linhas; i++) {
        assentos[i] = (char **)malloc(colunas * sizeof(char *));
        for (j = 0; j < colunas; j++) {
            assentos[i][j] = (char *)malloc(4 * sizeof(char));
        }
    }
    inicializarAssentos(assentos, linhas, colunas);
    return assentos;
}

void liberarAssentos(char ***assentos, int linhas, int colunas) {
    int i, j;
	for (i = 0; i < linhas; i++) {
        for (j = 0; j < colunas; j++) {
            free(assentos[i][j]);
        }
        free(assentos[i]);
    }
    free(assentos);
}

void mostrarAssentos(char ***assentos, int linhas, int colunas) {
    printf("\n ======== MAPA DE ASSENTOS ========\n\n");
    printf("      [1]  [2]   |   [3]  [4]  \n");
    printf("     /-----------------------\\\n");
	int i, j;
    for (i = 0; i < linhas; i++) {
        printf(" [%c] ", LETRAS[i]);
        for (j = 0; j < colunas; j++) {
            if (j == 2) {
                printf("  |  ");
            }
            if (strcmp(assentos[i][j], "X") == 0) {
                printf(" X   ");
            } else {
                printf(" %-4s", assentos[i][j]);
            }
        }
        printf("\n");
    }
    printf("     \\-----------------------/\n");
    printf("==================================\n");
}

int escolherAssento(char ***assentos, int linhas, int colunas, char letra, int numero) {
	setlocale(LC_ALL, "Portuguese");
    int linha = letra - 'A';
    int coluna = numero - 1;

    if (linha < 0 || linha >= linhas || coluna < 0 || coluna >= colunas) {
        printf("Assento inválido! Tente novamente.\n");
        return 0;
    }

    if (strcmp(assentos[linha][coluna], "X") == 0) {
        printf("Assento já ocupado! Escolha outro.\n");
        return 0;
    }

    strcpy(assentos[linha][coluna], "X");
    printf("Assento %c-%d escolhido com sucesso!\n", letra, numero);
    return 1;
}

void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void exibirMenuRotas() {
	setlocale(LC_ALL, "Portuguese");
	int i;
    printf("\n ======== MENU DE ROTAS ========\n\n");
    for (i = 0; i < MAX_DESTINOS; i++) {
        printf("Barco %d\n", i + 1);
        printf("%s\n", rotas[i].rota);
        printf("Horário: %s\n", rotas[i].horario);
        printf("Preço: %s\n", rotas[i].preco);
        printf("Capacidade: %d\n", rotas[i].linhas * rotas[i].colunas);
        printf("=================================\n");
    }
    printf("Escolha o número do barco para mais detalhes ou 0 para voltar ao menu principal:\n");
}

void imprimirComprovante(Rota rotaSelecionada, char assentosEscolhidos[MAX_PASSAGENS][5], int totalAssentos) {
	setlocale(LC_ALL, "Portuguese");
	int i;
    int precoUnitario = atoi(rotaSelecionada.preco + 2); // Remove o "R$" para pegar o valor
    int precoTotal = precoUnitario * totalAssentos;

    printf("\n ======== COMPROVANTE DE COMPRA ========\n\n");
    printf("Rota: %s\n", rotaSelecionada.rota);
    printf("Horário: %s\n", rotaSelecionada.horario);
    printf("Assentos escolhidos:\n");
    for (i = 0; i < totalAssentos; i++) {
        printf(" - %s\n", assentosEscolhidos[i]);
    }
    printf("Preço total: R$%d\n", precoTotal);
    printf("=======================================\n");
}

void exibirCompraFinal(Rota rotaSelecionada, char assentosEscolhidos[MAX_PASSAGENS][5], int totalAssentos) {
	setlocale(LC_ALL, "Portuguese");
    system(CLEAR);
    imprimirComprovante(rotaSelecionada, assentosEscolhidos, totalAssentos);
    printf("\n ======= SUA COMPRA =======\n\n");
    printf("1. Confirmo compra.\n");
    printf("Escolha uma opção: ");
    
    int opcao;
    scanf("%d", &opcao);
    limparBuffer();

    if (opcao == 1) {
        system(CLEAR);
        printf("Obrigado por escolher o Banzeiro. Vamos navegar juntos para o futuro? \nBoa Viagem!!!\n");
    }
}

// Menu do Funcionário
void menuFuncionario() {
	setlocale(LC_ALL, "Portuguese");
	SetConsoleTitle("BANZEIRO - FUNCIONÁRIO");
	Barco *barcos = NULL;
	Funcionario *funcis = NULL;
	int n = 0, m = 0, opcao=0;
	
	char assentos[LINHAS][COLUNAS][4];
   	char letra;
    int numero;
    int escolha, sair = 0;
	
    do {
        printf("\n ============= Menu Funcionário =============\n\n");
        printf("\t    1. Cadastrar Cliente\n");
        printf("\t    2. Atualizar Cliente\n\n");
        printf("\t   3. Listar Embarcações\n\n");
        printf("\t    4. Verificar Assentos\n");
        printf("\t      5. Emitir Passagem\n\n");
        printf("\t           0. Sair\n\n");
        printf("\t    Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: 
				printf("Cadastrando Cliente...\n");
				system("pause");
				system("cls");
				break;
            case 2: 
				printf("Atualizando Cliente...\n"); 
				system("pause");
       			system("cls");
				break;
			case 3:
				printf("Listando Embarcações...\n"); 
				system("pause");
				ver_barcos(barcos, m);
				system("cls");
				break;
			case 4: 
				printf("Monstrando Assentos...\n"); 
				animacaoBarco();
				system("cls");
			 
			    while (!sair) {
        		system(CLEAR);

        printf("\n ============== MENU PRINCIPAL ==============\n\n");
        printf("\t     1. Selecionar Rota\n");
        printf("\t          2. Sair\n\n");
        printf("\t     Escolha uma opção: ");
        scanf("%d", &escolha);
        limparBuffer();

        switch (escolha) {
            case 1:
                while (1) {
                    system(CLEAR);
                    exibirMenuRotas();
                    int rotaEscolhida;
                    scanf("%d", &rotaEscolhida);
                    limparBuffer();

                    if (rotaEscolhida == 0) break;  // Volta ao menu principal

                    if (rotaEscolhida < 1 || rotaEscolhida > MAX_DESTINOS) {
                        printf("Opção inválida! Tente novamente.\n");
                        continue;
                    }

                    Rota rotaSelecionada = rotas[rotaEscolhida - 1];
                    char ***assentos = criarAssentos(rotaSelecionada.linhas, rotaSelecionada.colunas);
                    char assentosEscolhidos[MAX_PASSAGENS][5];
                    int totalAssentosEscolhidos = 0;

                    while (1) {
                        system(CLEAR);
                        printf("Informações do Barco:\n");
                        printf("Rota: %s\n", rotaSelecionada.rota);
                        printf("Horário: %s\n", rotaSelecionada.horario);
                        printf("Preço: %s\n", rotaSelecionada.preco);
                        printf("Capacidade: %d\n\n", rotaSelecionada.linhas * rotaSelecionada.colunas);
                        mostrarAssentos(assentos, rotaSelecionada.linhas, rotaSelecionada.colunas);
                        printf("\nEscolha seu assento (letra e número) ou '0 0' para concluir:\n");

                        printf("Letra: ");
                        scanf(" %c", &letra);
                        printf("Número: ");
                        scanf("%d", &numero);
                        limparBuffer();

                        if (letra == '0' && numero == 0) break;

                        if (totalAssentosEscolhidos >= MAX_PASSAGENS) {
                            printf("Limite de 3 assentos atingido!\n");
                            printf("1. Concluir compra\n2. Sair\nEscolha uma opção: ");
                            int opcaoLimite;
                            scanf("%d", &opcaoLimite);
                            limparBuffer();

                            if (opcaoLimite == 1) {
                                break;
                            } else if (opcaoLimite == 2) {
                                liberarAssentos(assentos, rotaSelecionada.linhas, rotaSelecionada.colunas);
                                return;
                            } else {
                                printf("Opção inválida. Voltando ao menu de assentos.\n");
                                continue;
                            }
                        }

                        if (escolherAssento(assentos, rotaSelecionada.linhas, rotaSelecionada.colunas, letra, numero)) {
                            snprintf(assentosEscolhidos[totalAssentosEscolhidos], 5, "%c-%d", letra, numero);
                            totalAssentosEscolhidos++;

                            printf("\n1. Escolher outro assento\n2. Concluir compra\nEscolha uma opção: ");
                            int opcao;
                            scanf("%d", &opcao);
                            limparBuffer();

                            if (opcao == 2) break;
                        }
                    }

                    liberarAssentos(assentos, rotaSelecionada.linhas, rotaSelecionada.colunas);
                    exibirCompraFinal(rotaSelecionada, assentosEscolhidos, totalAssentosEscolhidos);
                    sair = 1;
                    break;
                }
                break;

            case 2:
                sair = 1;
                break;

            default:
                printf("Opção inválida! Tente novamente.\n");
                break;
        }
    }
			 
    		printf("Seleção de Assento Encerrada. Boa viagem!\n");
    		Sleep(3500);
    		system("cls");
			break;
            
			case 0:
				printf("Saindo...\n"); 
				system("cls");
				break;
            
			default:
				printf("Opção inválida!\n");
				system("pause");
				system("cls");
        }
    } while (opcao != 0);
}

// Função principal
int main() {
    setlocale(LC_ALL, "Portuguese");
    SetConsoleTitle("BANZEIRO");
    Funcionario gerente = {"Ana", "admin", "1234", "Gerente", 01, 7037};
    Funcionario funcionario = {"João", "func", "abcd", "Funcionário", 02, 8833};
    salvarFuncionario("admin", &gerente);
    salvarFuncionario("func", &funcionario);
    salvarFuncionario("funcionarios.dat", &gerente);

    int opcao;
    do {
        printf("\n === Sistema de Gerenciamento de Passagens ===\n\n");
        printf("\t\t1. Login\n");
        printf("\t    2. Recuperar Senha\n");
        printf("\t  3. Faça o seu cadastro\n");
        printf("\t\t 0. Sair\n");
        printf("\n\t   Escolha uma opção: ");
        scanf("%d", &opcao);
        system("cls");

        switch (opcao) {
            case 1: 
				login(); 
				break;
            case 2: 
				recuperarSenha(); 
				break;
			case 3: 
                cadastrarFuncionario(); 
                break;
            case 0: 
				printf("\n ========== Encerrando, até amanhã! ==========\n\n");
            	Sleep(2000);
				break;
            default: 
				printf("Opção inválida!\n");
        }
    } while (opcao != 0);

    return 0;
}
