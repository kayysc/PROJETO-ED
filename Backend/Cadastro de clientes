#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

int prox_id = 1;

struct endereco {
    char cep[9];
    char rua[50];
    char numero[10];
    char bairro[50];
    char cidade[50];
    char estado[50];
};

struct cliente {
    int id;
    char nome[50];
    char cpf[15]; 
    char data_nasc[11]; 
    struct endereco end;
    char email[50];
    char telefone[20];
    struct cliente *proximo_cl; // Lista encadeada
};

// validar e formatar CPF
void formatar_cpf(char *cpf) {
    char temp[12];
    int j = 0;

    for (int i = 0; i < strlen(cpf); i++) {
        if (isdigit(cpf[i])) {
            temp[j++] = cpf[i];
        }
    }
    temp[j] = '\0';

    if (strlen(temp) == 11) {
        sprintf(cpf, "%c%c%c.%c%c%c.%c%c%c-%c%c", 
                temp[0], temp[1], temp[2], temp[3], temp[4], temp[5],
                temp[6], temp[7], temp[8], temp[9], temp[10]);
    } else {
        printf("CPF inválido!\n");
        cpf[0] = '\0';
    }
}

// validar e formatar e-mail
int validar_email(const char *email) {
    return strchr(email, '@') && strchr(email, '.');
}

//  formatar data de nascimento
void formatar_data(char *data) {
    char temp[9];
    int j = 0;

    for (int i = 0; i < strlen(data); i++) {
        if (isdigit(data[i])) {
            temp[j++] = data[i];
        }
    }
    temp[j] = '\0';

    if (strlen(temp) == 8) {
        sprintf(data, "%c%c/%c%c/%c%c%c%c", 
                temp[0], temp[1], temp[2], temp[3], 
                temp[4], temp[5], temp[6], temp[7]);
    } else {
        printf("Data inválida! Use o formato dd/mm/aaaa.\n");
        data[0] = '\0';
    }
}

//cadastro de clientes
void cadastrar_cliente(struct cliente **head) {
    struct cliente *novo_cl = (struct cliente *)malloc(sizeof(struct cliente));
    novo_cl->id = prox_id++;

    printf("Nome: ");
    fflush(stdin);
    fgets(novo_cl->nome, 50, stdin);
    strtok(novo_cl->nome, "\n");

    do {
        printf("CPF (apenas números): ");
        fflush(stdin);
        fgets(novo_cl->cpf, 15, stdin);
        strtok(novo_cl->cpf, "\n");
        formatar_cpf(novo_cl->cpf);
    } while (novo_cl->cpf[0] == '\0');

    do {
        printf("Data de Nascimento (dd/mm/aaaa): ");
        fflush(stdin);
        fgets(novo_cl->data_nasc, 11, stdin);
        strtok(novo_cl->data_nasc, "\n");
        formatar_data(novo_cl->data_nasc);
    } while (novo_cl->data_nasc[0] == '\0');

    printf("CEP: ");
    fflush(stdin);
    fgets(novo_cl->end.cep, 9, stdin);
    strtok(novo_cl->end.cep, "\n");

    printf("Rua: ");
    fflush(stdin);
    fgets(novo_cl->end.rua, 50, stdin);
    strtok(novo_cl->end.rua, "\n");

    printf("Número: ");
    fflush(stdin);
    fgets(novo_cl->end.numero, 10, stdin);
    strtok(novo_cl->end.numero, "\n");

    printf("Bairro: ");
    fflush(stdin);
    fgets(novo_cl->end.bairro, 50, stdin);
    strtok(novo_cl->end.bairro, "\n");

    printf("Cidade: ");
    fflush(stdin);
    fgets(novo_cl->end.cidade, 50, stdin);
    strtok(novo_cl->end.cidade, "\n");

    printf("Estado: ");
    fflush(stdin);
    fgets(novo_cl->end.estado, 50, stdin);
    strtok(novo_cl->end.estado, "\n");

    do {
        printf("E-mail: ");
        fflush(stdin);
        fgets(novo_cl->email, 50, stdin);
        strtok(novo_cl->email, "\n");
        if (!validar_email(novo_cl->email)) {
            printf("E-mail inválido! Inclua um '@' e um domínio.\n");
        }
    } while (!validar_email(novo_cl->email));

    printf("Telefone: ");
    fflush(stdin);
    fgets(novo_cl->telefone, 20, stdin);
    strtok(novo_cl->telefone, "\n");

    novo_cl->proximo_cl = *head;
    *head = novo_cl;

    printf("\nCliente cadastrado com sucesso!\n");
}

//listar
void listar_clientes(struct cliente *head) {
    if (head == NULL) {
        printf("Nenhum cliente cadastrado.\n");
        return;
    }

    struct cliente *atual = head;
    while (atual != NULL) {
        printf("\n--------------------------------------------------\n");
        printf("ID: %d\n", atual->id);
        printf("Nome: %s\n", atual->nome);
        printf("CPF: %s\n", atual->cpf);
        printf("Data de Nascimento: %s\n", atual->data_nasc);
        printf("E-mail: %s\n", atual->email);
        printf("Telefone: %s\n", atual->telefone);
        atual = atual->proximo_cl;
    }
}

//buscar
void buscar_cliente_por_id(struct cliente *head, int id) {
    struct cliente *atual = head;

    while (atual != NULL) {
        if (atual->id == id) {
            printf("\nCliente encontrado:\n");
            printf("ID: %d\n", atual->id);
            printf("Nome: %s\n", atual->nome);
            printf("CPF: %s\n", atual->cpf);
            printf("Data de Nascimento: %s\n", atual->data_nasc);
            printf("E-mail: %s\n", atual->email);
            printf("Telefone: %s\n", atual->telefone);
            return;
        }
        atual = atual->proximo_cl;
    }

    printf("Cliente com ID %d não encontrado.\n", id);
}

//excluir
void excluir_cliente(struct cliente **head, int id) {
    struct cliente *atual = *head;
    struct cliente *anterior = NULL;

    while (atual != NULL) {
        if (atual->id == id) {
            if (anterior == NULL) { // Remover o primeiro elemento
                *head = atual->proximo_cl;
            } else {
                anterior->proximo_cl = atual->proximo_cl;
            }
            free(atual);
            printf("\nCliente com ID %d removido com sucesso.\n", id);
            return;
        }
        anterior = atual;
        atual = atual->proximo_cl;
    }

    printf("Cliente com ID %d não encontrado.\n", id);
}

int main() {
    struct cliente *head_cliente = NULL;
    int opcao, id;

    do {
        printf("\n1- Cadastrar Cliente");
        printf("\n2- Listar Todos os Clientes");
        printf("\n3- Buscar Cliente por ID");
        printf("\n4- Excluir Cliente");
        printf("\n0- Sair\n");
        printf("Digite a opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                cadastrar_cliente(&head_cliente);
                break;
            case 2:
                listar_clientes(head_cliente);
                break;
            case 3:
                printf("Digite o ID do cliente a ser buscado: ");
                scanf("%d", &id);
                buscar_cliente_por_id(head_cliente, id);
                break;
            case 4:
                printf("Digite o ID do cliente a ser excluído: ");
                scanf("%d", &id);
                excluir_cliente(&head_cliente, id);
                break;
            case 0:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida! Tente novamente.\n");
                break;
        }
    } while (opcao != 0);

    return 0;
}
