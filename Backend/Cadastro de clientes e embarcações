#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int prox_id= 1;

struct endereco{

	char cep[9];
	char rua[50];
	char numero[10];
	char bairro[50];
	char cidade[50];
	char estado[50];	
}; 

struct cliente{
	
	int id;
	char nome[50];
	char cpf[11];
	char data_nasc[20];
	struct endereco end;
	char email[50];
	char telefone[20];
	struct cliente *proximo_cl;// aponta para um novo cliente, permitindo uma lista encadeada
};  

struct embarcacao{
	char nome[50];
	char tipo[50];
	int capacidade;
	struct embarcacao *proximo_em;//aponta para uma nova embarcaco
};


void cadastrar_cl(struct cliente **head){// o 'head' é um ponteiro para o primeiro cliente da lista, mas como passamos ele como '**head', 
//ele sera atualizado pela funcao e o ponteiro apontara para o novo cliente
	struct cliente *novo_cl = (struct cliente*) malloc(sizeof(struct cliente));// '*novo_cl' recebe novo espaco na memoria 
	novo_cl->id = prox_id++;

	printf("Nome: ");
	fflush(stdin);
	fgets(novo_cl->nome,50,stdin);
	
	printf("CPF: ");
	fflush(stdin);
	fgets(novo_cl->cpf,11,stdin);
	
	printf("Data de Nascimento: ");
	fflush(stdin);
	fgets(novo_cl->data_nasc,20,stdin);
	
	printf("CEP: ");
	fflush(stdin);
	fgets(novo_cl->end.cep,9,stdin);
	
	printf("Rua: ");
	fflush(stdin);
	fgets(novo_cl->end.rua,50,stdin);
	
	printf("Numero: ");
	fflush(stdin);
	fgets(novo_cl->end.numero,10,stdin);
	
	printf("Bairro: ");
	fflush(stdin);
	fgets(novo_cl->end.bairro,50,stdin);
	
	printf("Cidade: ");
	fflush(stdin);
	fgets(novo_cl->end.cidade,50,stdin);
	
	printf("Estado: ");
	fflush(stdin);
	fgets(novo_cl->end.estado,50,stdin);
	
	printf("E-mail: ");
	fflush(stdin);
	fgets(novo_cl->email,50,stdin);
	
	printf("Telefone: ");
	fflush(stdin);
	fgets(novo_cl->telefone,20,stdin);
	
	novo_cl->proximo_cl = *head;//vai apontar para o atual primeiro cliente da lista
    *head = novo_cl;
    
	printf("\nCliente cadastrado com sucesso!\n\n");
}

void cadastrar_em(struct embarcacao **head){
	
	struct embarcacao *nova_em= (struct embarcaco*) malloc(sizeof(struct embarcacao));
	
	printf("Nome da Embarcacao: ");
	fflush(stdin);
	fgets(nova_em->nome,50,stdin);
	
	printf("Tipo da embarcacao: ");
	fflush(stdin);
	fgets(nova_em->tipo,50,stdin);
	
	printf("Capacidade: ");
	scanf("%d", &nova_em->capacidade);
	getchar();
	
	nova_em->proximo_em = *head;
    *head = nova_em;
    
    printf("\nEmbarcação cadastrada com sucesso!\n\n");
	
}

void listar_clientes(struct cliente *head){
	
	if(head==NULL){
		printf("Nenhum cliente cadastrado!");
		return;
	}
	struct cliente *atual=head;
	while(atual!=NULL){
		
		printf("--------------------------------------------------");
		printf("\nID: %d\n", atual->id);
		printf("Nome: %s", atual->nome);
        printf("CPF: %s", atual->cpf);
        printf("CEP: %s", atual->end.cep);
        printf("Rua: %s", atual->end.rua);
        printf("Numero: %s", atual->end.numero);
        printf("Bairro: %s", atual->end.bairro);
        printf("Cidade: %s", atual->end.cidade);
        printf("Estado: %s", atual->end.estado);
        printf("Data de Nascimento: %s", atual->data_nasc);
        printf("\nTelefone: %s\n", atual->telefone);
        atual = atual->proximo_cl;	
	}
}

void listar_embarcacoes(struct embarcacao *head){
	if(head==NULL){
		printf("Nenhuma embarcacao cadastrada\n");
		return;
	}
	struct embarcacao *atual=head;
	while(atual!=NULL){
		
		printf("Nome da Embarcação: %s", atual->nome);
        printf("Tipo: %s", atual->tipo);
        printf("Capacidade: %d\n", atual->capacidade);
        atual = atual->proximo_em;	
	}
}



int main(){
	
	struct cliente *head_cliente= NULL;
	struct embarcacao *head_embarcacao= NULL;
	int opcao;
	
	
	do{
	
	printf("1-Cadastrar Cliente");
	printf("\n2-Cadastrar Embarcacao");
	printf("\n3-Listar Clientes");
	printf("\n4-Listar Embarcacoes");
	printf("\n0- Sair\n");
	printf("Digite a opcao: ");
	scanf("%d", &opcao);
	
	switch (opcao){
	
	case 1:
                cadastrar_cl(&head_cliente);
                break;
    case 2:
                cadastrar_em(&head_embarcacao);
                break;
    case 3:
                listar_clientes(head_cliente);
                break;
    case 4:
                listar_embarcacoes(head_embarcacao);
                break;
    case 0:
                printf("Saindo...\n");
                break;
	default:
        printf("Opção inválida! Tente novamente.\n");
        break;
		
	}
}while (opcao !=0);

	return 0;	
}
