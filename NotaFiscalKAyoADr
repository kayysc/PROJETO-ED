#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <locale.h>

// Estrutura para armazenar os dados do cliente e da nota fiscal
typedef struct {
    int numeroNota;
    char nome[100];
    char cpf[15];
    char endereco[150];
    char data[11];
    char produto[100];
    int quantidade;
    float preco_unitario;
    float total;
} NotaFiscal;

// Função para gerar um número de nota fiscal aleatório
int gerarNumeroNota() {
    return rand() % 100000 + 1; // Número aleatório entre 1 e 100000
}

// Função para criar uma nova nota fiscal
void criarNotaFiscal() {
	setlocale(LC_ALL,"portuguese");
    system("cls");
	NotaFiscal nota;
    FILE *arquivo;

    // Inicializa o gerador de números aleatórios
    srand(time(NULL));

    // Gera número da nota fiscal
    nota.numeroNota = gerarNumeroNota();

    // Solicita os dados do cliente
    printf("\n ============= CADASTRO DE NOTA FISCAL =============\n\n");
    printf("\n       Nome do Cliente: ");
    fgets(nota.nome, sizeof(nota.nome), stdin);
    nota.nome[strcspn(nota.nome, "\n")] = '\0';

    printf("       CPF do Cliente: ");
    fgets(nota.cpf, sizeof(nota.cpf), stdin);
    nota.cpf[strcspn(nota.cpf, "\n")] = '\0';

    printf("       Endereço do Cliente: ");
    fgets(nota.endereco, sizeof(nota.endereco), stdin);
    nota.endereco[strcspn(nota.endereco, "\n")] = '\0';

    printf("       Data (dd/mm/aaaa): ");
    fgets(nota.data, sizeof(nota.data), stdin);
    nota.data[strcspn(nota.data, "\n")] = '\0';

    // Solicita os dados da compra
    printf("       Produto: ");
    fgets(nota.produto, sizeof(nota.produto), stdin);
    nota.produto[strcspn(nota.produto, "\n")] = '\0';

    printf("       Quantidade: ");
    scanf("%d", &nota.quantidade);

    printf("       Preço unitário: R$ ");
    scanf("%f", &nota.preco_unitario);
    getchar(); // Limpa o buffer

    // Calcula o total da compra
    nota.total = nota.quantidade * nota.preco_unitario;

    // Salva os dados no arquivo binário
    arquivo = fopen("notas_fiscais.dat", "ab");
    if (arquivo == NULL) {
        perror("\n       Erro ao abrir o arquivo");
        exit(EXIT_FAILURE);
    }

    fwrite(&nota, sizeof(NotaFiscal), 1, arquivo);
    fclose(arquivo);

    printf("\n       Nota fiscal salva com sucesso!");
    printf("\n       Número da Nota Fiscal: %d", nota.numeroNota);
    printf("\n       Total da compra: R$ %.2f", nota.total);
}

// Função para listar todas as notas fiscais
void listarNotasFiscais() {
    system("cls");
    setlocale(LC_ALL,"portuguese");
	NotaFiscal nota;
    FILE *arquivo;

    arquivo = fopen("notas_fiscais.dat", "rb");
    if (arquivo == NULL) {
        perror("\n       Erro ao abrir o arquivo");
        exit(EXIT_FAILURE);
    }
    printf("\n ============= LISTAGEM DE NOTAS FISCAIS =============\n\n");
    while (fread(&nota, sizeof(NotaFiscal), 1, arquivo)) {
        printf("\nNúmero da Nota: %d\n", nota.numeroNota);
        printf("\n       Nome: %s\n", nota.nome);
        printf("\n       CPF: %s\n", nota.cpf);
        printf("\n       Endereço: %s\n", nota.endereco);
        printf("\n       Data: %s\n", nota.data);
        printf("\n       Produto: %s\n", nota.produto);
        printf("\n       Quantidade: %d\n", nota.quantidade);
        printf("\n       Preço Unitário: R$ %.2f\n", nota.preco_unitario);
        printf("\n       Total: R$ %.2f\n", nota.total);
        printf("--------------------------------\n");
    }

    fclose(arquivo);
}

// Função para buscar notas fiscais por nome ou CPF
void buscarNotasFiscais() {
	system("cls");
    setlocale(LC_ALL,"portuguese");
    NotaFiscal nota;
    FILE *arquivo;
    char busca[100];
    int encontrado = 0;

    printf("\n       Digite o nome ou CPF para busca: ");
    fgets(busca, sizeof(busca), stdin);
    busca[strcspn(busca, "\n")] = '\0';

    arquivo = fopen("notas_fiscais.dat", "rb");
    if (arquivo == NULL) {
        perror("\n       Erro ao abrir o arquivo");
        exit(EXIT_FAILURE);
    }

    printf("\n ============= RESULTADOS DA BUSCA =============\n\n");
    while (fread(&nota, sizeof(NotaFiscal), 1, arquivo)) {
        if (strcmp(nota.nome, busca) == 0 || strcmp(nota.cpf, busca) == 0) {
            encontrado = 1;
            printf("\n       Número da Nota: %d\n", nota.numeroNota);
            printf("\n       Nome: %s\n", nota.nome);
            printf("\n       CPF: %s\n", nota.cpf);
            printf("\n       Endereço: %s\n", nota.endereco);
            printf("\n       Data: %s\n", nota.data);
            printf("\n       Produto: %s\n", nota.produto);
            printf("\n       Quantidade: %d\n", nota.quantidade);
            printf("\n       Preço Unitário: R$ %.2f\n", nota.preco_unitario);
            printf("\n       Total: R$ %.2f\n", nota.total);
            printf("--------------------------------\n");
        }
    }

    if (!encontrado) {
        printf("\n       Nenhuma nota fiscal encontrada para o termo informado.\n");
    }

    fclose(arquivo);
}

int main() {
    int opcao;
    setlocale(LC_ALL,"portuguese");

    do {
        printf("\n ============= MENU =============\n\n");
        printf("Criar Nota Fiscal\n");
        printf("Listar Notas Fiscais\n");
        printf("Buscar Notas Fiscais\n");
        printf("Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        getchar(); // Limpa o buffer do teclado

        switch (opcao) {
            case 1:
                criarNotaFiscal();
                break;
            case 2:
                listarNotasFiscais();
                break;
            case 3:
                buscarNotasFiscais();
                break;
            case 4:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida!\n");
        }
    } while (opcao != 4);

    return 0;
}
