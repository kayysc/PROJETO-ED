//codigo cliente.c ...

// Carregar os IDs do arquivo
int carregarUltimoIDCliente(const char *filename) {
    int id = 1; // Valor padrão
    FILE *file = fopen(filename, "rb");
    if (file) {
        fread(&id, sizeof(int), 1, file);
        fclose(file);
    } else {
        // Se o arquivo não existir, cria um novo com valor padrão
        salvarUltimoIDCliente(filename, id);
    }
    return id;
}

// Salva o último ID do cliente no arquivo binário
void salvarUltimoIDCliente(const char *filename, int id) {
    FILE *file = fopen(filename, "wb");
    if (file) {
        fwrite(&id, sizeof(int), 1, file);
        fclose(file);
    } else {
        printf("Erro ao salvar o último ID.\n");
    }
}

// Função para gerar um novo ID de cliente
int gerarClienteID(const char *filename) {
    static int ultimoIDCliente;
    static int inicializado = 0;

    if (!inicializado) {
        ultimoIDCliente = carregarUltimoIDCliente(filename);
        inicializado = 1;
    }

    ultimoIDCliente++;
    salvarUltimoIDCliente(filename, ultimoIDCliente); // Salva o novo ID
    return ultimoIDCliente;
}

void cadastrar_cliente() {
    if (num_clientes >= 100) {
        setColor(12);
        printf("\n        Limite maximo de clientes atingido!\n");
        setColor(15);
        return;
    }

    system(CLEAR);
    printf("\n ============= CADASTRAR CLIENTE =============\n\n");

    // Realoca memória para o array de clientes, incluindo o novo cliente
    struct cliente *temp = (struct cliente *)realloc(clientes, (num_clientes + 1) * sizeof(struct cliente));
    if (temp == NULL) {
        printf("Erro ao alocar memoria para os clientes.\n");
        exit(1);
    }
    clientes = temp; 

    struct cliente novo_cl;
    novo_cl.id = gerarClienteID("clientes_id.bin"); 

    printf("       Nome: ");
    fflush(stdin);
    fgets(novo_cl.nome, 50, stdin);
    strtok(novo_cl.nome, "\n");

    do {
        ler_cpf_formatado(novo_cl.cpf);
    } while (strlen(novo_cl.cpf) != 14);

    do {
        ler_data_formatada(novo_cl.data_nasc);
        if (!validar_data(novo_cl.data_nasc)) {
            printf("\n        ");
            setColor(12);
            printf("Data invalida");
            setColor(15);
            printf("! Tente novamente.\n");
        }
    } while (!validar_data(novo_cl.data_nasc));

    do {
        ler_telefone_formatado(novo_cl.telefone);
    } while (strlen(novo_cl.telefone) != 15);

    clientes[num_clientes] = novo_cl;
    num_clientes++;

    // Salva os clientes após o cadastro
    salvarClientes("clientes.dat"); 

    printf("\n        Cliente cadastrado com ");
    setColor(10);
    printf("sucesso");
    setColor(15);
    printf("!\n");

    // Registro da operação no histórico
    char descricaoOperacao[350];
    snprintf(descricaoOperacao, sizeof(descricaoOperacao), "Cadastro de cliente| Nome: %s |CPF: %s", novo_cl.nome, novo_cl.cpf);
    registrarOperacao(userLogado, descricaoOperacao);

    getch();
}

//restante do codigo ...
